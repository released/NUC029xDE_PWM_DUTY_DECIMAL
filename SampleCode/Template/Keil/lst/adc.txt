; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\adc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\adc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\NUC029xDE\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\adc.crf ..\..\..\Library\StdDriver\src\adc.c]
                          THUMB

                          AREA ||i.ADC_Close||, CODE, READONLY, ALIGN=2

                  ADC_Close PROC
;;;62       */
;;;63     void ADC_Close(ADC_T *adc)
000000  4802              LDR      r0,|L1.12|
;;;64     {
;;;65         ADC->ADCR &= (~ADC_ADCR_ADEN_Msk);
000002  6a01              LDR      r1,[r0,#0x20]
000004  0849              LSRS     r1,r1,#1
000006  0049              LSLS     r1,r1,#1
000008  6201              STR      r1,[r0,#0x20]
;;;66         return;
;;;67     }
00000a  4770              BX       lr
;;;68     
                          ENDP

                  |L1.12|
                          DCD      0x400e0000

                          AREA ||i.ADC_DisableHWTrigger||, CODE, READONLY, ALIGN=2

                  ADC_DisableHWTrigger PROC
;;;99       */
;;;100    void ADC_DisableHWTrigger(ADC_T *adc)
000000  4803              LDR      r0,|L2.16|
;;;101    {
;;;102        ADC->ADCR &= ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk);
000002  6a01              LDR      r1,[r0,#0x20]
000004  22ff              MOVS     r2,#0xff
000006  32f1              ADDS     r2,r2,#0xf1
000008  4391              BICS     r1,r1,r2
00000a  6201              STR      r1,[r0,#0x20]
;;;103        return;
;;;104    }
00000c  4770              BX       lr
;;;105    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x400e0000

                          AREA ||i.ADC_DisableInt||, CODE, READONLY, ALIGN=2

                  ADC_DisableInt PROC
;;;144      */
;;;145    void ADC_DisableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;146    {
;;;147        if(u32Mask & ADC_ADF_INT)
;;;148            ADC->ADCR &= ~ADC_ADCR_ADIE_Msk;
000002  4809              LDR      r0,|L3.40|
000004  2202              MOVS     r2,#2
000006  2b00              CMP      r3,#0                 ;147
000008  d002              BEQ      |L3.16|
00000a  6a03              LDR      r3,[r0,#0x20]
00000c  4393              BICS     r3,r3,r2
00000e  6203              STR      r3,[r0,#0x20]
                  |L3.16|
;;;149        if(u32Mask & ADC_CMP0_INT)
000010  078b              LSLS     r3,r1,#30
000012  d502              BPL      |L3.26|
;;;150            ADC->ADCMPR[0] &= ~ADC_ADCMPR_CMPIE_Msk;
000014  6a83              LDR      r3,[r0,#0x28]
000016  4393              BICS     r3,r3,r2
000018  6283              STR      r3,[r0,#0x28]
                  |L3.26|
;;;151        if(u32Mask & ADC_CMP1_INT)
00001a  0749              LSLS     r1,r1,#29
00001c  d502              BPL      |L3.36|
;;;152            ADC->ADCMPR[1] &= ~ADC_ADCMPR_CMPIE_Msk;
00001e  6ac1              LDR      r1,[r0,#0x2c]
000020  4391              BICS     r1,r1,r2
000022  62c1              STR      r1,[r0,#0x2c]
                  |L3.36|
;;;153    
;;;154        return;
;;;155    }
000024  4770              BX       lr
;;;156    
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      0x400e0000

                          AREA ||i.ADC_EnableHWTrigger||, CODE, READONLY, ALIGN=2

                  ADC_EnableHWTrigger PROC
;;;82       */
;;;83     void ADC_EnableHWTrigger(ADC_T *adc,
000000  b510              PUSH     {r4,lr}
;;;84                              uint32_t u32Source,
;;;85                              uint32_t u32Param)
;;;86     {
;;;87         ADC->ADCR &= ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk);
000002  4806              LDR      r0,|L4.28|
000004  6a03              LDR      r3,[r0,#0x20]
000006  24ff              MOVS     r4,#0xff
000008  34f1              ADDS     r4,r4,#0xf1
00000a  43a3              BICS     r3,r3,r4
00000c  6203              STR      r3,[r0,#0x20]
;;;88     
;;;89         ADC->ADCR |= u32Source | u32Param | ADC_ADCR_TRGEN_Msk;
00000e  6a03              LDR      r3,[r0,#0x20]
000010  430b              ORRS     r3,r3,r1
000012  1581              ASRS     r1,r0,#22
000014  430a              ORRS     r2,r2,r1
000016  4313              ORRS     r3,r3,r2
000018  6203              STR      r3,[r0,#0x20]
;;;90     
;;;91         return;
;;;92     }
00001a  bd10              POP      {r4,pc}
;;;93     
                          ENDP

                  |L4.28|
                          DCD      0x400e0000

                          AREA ||i.ADC_EnableInt||, CODE, READONLY, ALIGN=2

                  ADC_EnableInt PROC
;;;120      */
;;;121    void ADC_EnableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;122    {
;;;123        if(u32Mask & ADC_ADF_INT)
;;;124            ADC->ADCR |= ADC_ADCR_ADIE_Msk;
000002  4809              LDR      r0,|L5.40|
000004  2202              MOVS     r2,#2
000006  2b00              CMP      r3,#0                 ;123
000008  d002              BEQ      |L5.16|
00000a  6a03              LDR      r3,[r0,#0x20]
00000c  4313              ORRS     r3,r3,r2
00000e  6203              STR      r3,[r0,#0x20]
                  |L5.16|
;;;125        if(u32Mask & ADC_CMP0_INT)
000010  078b              LSLS     r3,r1,#30
000012  d502              BPL      |L5.26|
;;;126            ADC->ADCMPR[0] |= ADC_ADCMPR_CMPIE_Msk;
000014  6a83              LDR      r3,[r0,#0x28]
000016  4313              ORRS     r3,r3,r2
000018  6283              STR      r3,[r0,#0x28]
                  |L5.26|
;;;127        if(u32Mask & ADC_CMP1_INT)
00001a  0749              LSLS     r1,r1,#29
00001c  d502              BPL      |L5.36|
;;;128            ADC->ADCMPR[1] |= ADC_ADCMPR_CMPIE_Msk;
00001e  6ac1              LDR      r1,[r0,#0x2c]
000020  4311              ORRS     r1,r1,r2
000022  62c1              STR      r1,[r0,#0x2c]
                  |L5.36|
;;;129    
;;;130        return;
;;;131    }
000024  4770              BX       lr
;;;132    
                          ENDP

000026  0000              DCW      0x0000
                  |L5.40|
                          DCD      0x400e0000

                          AREA ||i.ADC_Open||, CODE, READONLY, ALIGN=2

                  ADC_Open PROC
;;;41       */
;;;42     void ADC_Open(ADC_T *adc,
000000  b530              PUSH     {r4,r5,lr}
;;;43                   uint32_t u32InputMode,
;;;44                   uint32_t u32OpMode,
;;;45                   uint32_t u32ChMask)
;;;46     {
;;;47     
;;;48         ADC->ADCR = (ADC->ADCR & (~(ADC_ADCR_DIFFEN_Msk | ADC_ADCR_ADMD_Msk))) | \
000002  4806              LDR      r0,|L6.28|
000004  6a04              LDR      r4,[r0,#0x20]
000006  4d06              LDR      r5,|L6.32|
000008  402c              ANDS     r4,r4,r5
00000a  430c              ORRS     r4,r4,r1
00000c  4314              ORRS     r4,r4,r2
00000e  6204              STR      r4,[r0,#0x20]
;;;49                     u32InputMode | \
;;;50                     u32OpMode;
;;;51     
;;;52         ADC->ADCHER  = (ADC->ADCHER & ~ADC_ADCHER_CHEN_Msk) | (u32ChMask);
000010  6a41              LDR      r1,[r0,#0x24]
000012  0a09              LSRS     r1,r1,#8
000014  0209              LSLS     r1,r1,#8
000016  4319              ORRS     r1,r1,r3
000018  6241              STR      r1,[r0,#0x24]
;;;53     
;;;54         return;
;;;55     }
00001a  bd30              POP      {r4,r5,pc}
;;;56     
                          ENDP

                  |L6.28|
                          DCD      0x400e0000
                  |L6.32|
                          DCD      0xfffffbf3

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REV16|
#line 118 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_adc_c_ADC_Open____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REVSH|
#line 132
|__asm___5_adc_c_ADC_Open____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

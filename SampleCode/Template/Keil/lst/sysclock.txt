; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sysclock.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sysclock.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\NUC029xDE\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\sysclock.crf ..\sysclock.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;39      */
;;;40     void SYS_Init()
000000  b5f8              PUSH     {r3-r7,lr}
000002  2059              MOVS     r0,#0x59
000004  2116              MOVS     r1,#0x16
000006  4c1f              LDR      r4,|L1.132|
000008  2288              MOVS     r2,#0x88
00000a  e002              B        |L1.18|
                  |L1.12|
00000c  6020              STR      r0,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6022              STR      r2,[r4,#0]
                  |L1.18|
000012  6823              LDR      r3,[r4,#0]
000014  2b01              CMP      r3,#1
000016  d1f9              BNE      |L1.12|
;;;41     {
;;;42         /*---------------------------------------------------------------------------------------------------------*/
;;;43         /* Init System Clock                                                                                       */
;;;44         /*---------------------------------------------------------------------------------------------------------*/
;;;45         //CLK->PWRCON = (CLK->PWRCON & ~(0x0000000Dul)) | 0x0000001Dul;
;;;46         //CLK->PLLCON = (CLK->PLLCON & ~(0x000FFFFFul)) | 0x0000C22Eul;
;;;47         //CLK->CLKDIV = (CLK->CLKDIV & ~(0x00FF0F0Ful)) | 0x00000000ul;
;;;48         //CLK->CLKSEL0 = (CLK->CLKSEL0 & ~(0x0000003Ful)) | 0x0000003Aul;
;;;49         //CLK->CLKSEL1 = (CLK->CLKSEL1 & ~(0xF377773Ful)) | 0xCC8FFFFFul;
;;;50         //CLK->CLKSEL2 = (CLK->CLKSEL2 & ~(0x000300FCul)) | 0x000200FFul;
;;;51         //CLK->AHBCLK = (CLK->AHBCLK & ~(0x0000001Cul)) | 0x00000001ul;
;;;52         //CLK->APBCLK = (CLK->APBCLK & ~(0xD0F3337Dul)) | 0x00110020ul;
;;;53         //CLK->FRQDIV = (CLK->FRQDIV & ~(0x0000003Ful)) | 0x00000000ul;
;;;54         //SysTick->CTRL = (SysTick->CTRL & ~(0x00000005ul)) | 0x00000000ul;
;;;55     
;;;56         /* Unlock protected registers */
;;;57         SYS_UnlockReg();
;;;58     
;;;59         /* Enable clock source */
;;;60         CLK_EnableXtalRC(CLK_PWRCON_OSC10K_EN_Msk|CLK_PWRCON_OSC22M_EN_Msk|CLK_PWRCON_XTL12M_EN_Msk);
000018  200d              MOVS     r0,#0xd
00001a  f7fffffe          BL       CLK_EnableXtalRC
;;;61     
;;;62         /* Waiting for clock source ready */
;;;63         CLK_WaitClockReady(CLK_CLKSTATUS_OSC10K_STB_Msk|CLK_CLKSTATUS_OSC22M_STB_Msk|CLK_CLKSTATUS_XTL12M_STB_Msk);
00001e  2019              MOVS     r0,#0x19
000020  f7fffffe          BL       CLK_WaitClockReady
;;;64     
;;;65         /* Disable PLL first to avoid unstable when setting PLL */
;;;66         CLK_DisablePLL();
000024  f7fffffe          BL       CLK_DisablePLL
;;;67     
;;;68         /* Set PLL frequency */
;;;69         CLK->PLLCON = (CLK->PLLCON & ~(0x000FFFFFul)) | 0x0000C22Eul;
000028  4817              LDR      r0,|L1.136|
00002a  6a01              LDR      r1,[r0,#0x20]
00002c  4a17              LDR      r2,|L1.140|
00002e  0d09              LSRS     r1,r1,#20
000030  0509              LSLS     r1,r1,#20
000032  1889              ADDS     r1,r1,r2
000034  6201              STR      r1,[r0,#0x20]
;;;70     
;;;71         /* Waiting for PLL ready */
;;;72         CLK_WaitClockReady(CLK_CLKSTATUS_PLL_STB_Msk);
000036  2004              MOVS     r0,#4
000038  f7fffffe          BL       CLK_WaitClockReady
;;;73     
;;;74         /* If the defines do not exist in your project, please refer to the related clk.h in the clk_h folder appended to the tool package. */
;;;75         /* Set HCLK clock */
;;;76         CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_PLL, CLK_CLKDIV_HCLK(1));
00003c  2100              MOVS     r1,#0
00003e  2002              MOVS     r0,#2
000040  f7fffffe          BL       CLK_SetHCLK
;;;77     
;;;78         /* Enable IP clock */
;;;79         CLK_EnableModuleClock(PWM0_MODULE);
000044  4d12              LDR      r5,|L1.144|
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       CLK_EnableModuleClock
;;;80         CLK_EnableModuleClock(TMR3_MODULE);
00004c  4e11              LDR      r6,|L1.148|
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       CLK_EnableModuleClock
;;;81         CLK_EnableModuleClock(UART0_MODULE);
000054  4f10              LDR      r7,|L1.152|
000056  4638              MOV      r0,r7
000058  f7fffffe          BL       CLK_EnableModuleClock
;;;82     
;;;83         /* Set IP clock */
;;;84         CLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL3_PWM0_S_PCLK, MODULE_NoMsk);
00005c  2200              MOVS     r2,#0
00005e  0329              LSLS     r1,r5,#12
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       CLK_SetModuleClock
;;;85         CLK_SetModuleClock(TMR3_MODULE, CLK_CLKSEL1_TMR3_S_HXT, MODULE_NoMsk);
000066  2200              MOVS     r2,#0
000068  4611              MOV      r1,r2
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       CLK_SetModuleClock
;;;86         CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART_S_HXT, CLK_CLKDIV_UART(1));
000070  2200              MOVS     r2,#0
000072  4611              MOV      r1,r2
000074  4638              MOV      r0,r7
000076  f7fffffe          BL       CLK_SetModuleClock
;;;87     
;;;88         /* Update System Core Clock */
;;;89         /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock. */
;;;90         SystemCoreClockUpdate();
00007a  f7fffffe          BL       SystemCoreClockUpdate
00007e  2000              MOVS     r0,#0
000080  6020              STR      r0,[r4,#0]
;;;91     
;;;92         /* Lock protected registers */
;;;93         SYS_LockReg();
;;;94     
;;;95         return;
;;;96     }
000082  bdf8              POP      {r3-r7,pc}
;;;97     /*** (C) COPYRIGHT 2013-2019 Nuvoton Technology Corp. ***/
                          ENDP

                  |L1.132|
                          DCD      0x50000100
                  |L1.136|
                          DCD      0x50000200
                  |L1.140|
                          DCD      0x0000c22e
                  |L1.144|
                          DCD      0xb3000010
                  |L1.148|
                          DCD      0x5f400005
                  |L1.152|
                          DCD      0x57803d10

;*** Start embedded assembler ***

#line 1 "..\\sysclock.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_sysclock_c_SYS_Init____REV16|
#line 118 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_sysclock_c_SYS_Init____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_sysclock_c_SYS_Init____REVSH|
#line 132
|__asm___10_sysclock_c_SYS_Init____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
